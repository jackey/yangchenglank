<?php

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds term specific visibility options to add block form.
 *
 * @see block_add_block_form()
 */
function block_term_form_block_add_block_form_alter(&$form, &$form_state) {
  block_term_form_block_admin_configure_alter($form, $form_state);
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Adds term specific visibility options to block configuration form.
 *
 * @see block_admin_configure()
 */
function block_term_form_block_admin_configure_alter(&$form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'block_term') . '/block_term.js');
  $vocabs = taxonomy_vocabulary_get_names();

  $default_tid_options = db_query("SELECT tid FROM {block_term} WHERE module = :module AND delta = :delta", array(
    ':module' => $form['module']['#value'],
    ':delta' => $form['delta']['#value'],
  ))->fetchCol();
  $form['visibility']['terms'] = array(
    '#type' => 'fieldset',
    '#title' => t('Terms'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#group' => 'visibility',
    '#weight' => 6,
    '#description' => t('Show this block only on pages that display content with any of the given term(s). If you select no terms, there will be no term-specific limitation.'),
    '#tree' => true,
  );
  $vocabularies = taxonomy_get_vocabularies();
  $options = array();
  foreach ($vocabularies as $vid => $vocabulary) {
    $tree = taxonomy_get_tree($vid);
    if ($tree && (count($tree) > 0)) {
      $options[$vocabulary->name] = array();
      foreach ($tree as $term) {
        $text = str_repeat('--', $term->depth) . $term->name;
        if ($term->depth == 0) {
          //$text = '<span class="parent-term-text">'.$text.'</span>';
        }
        $options[$vocabulary->name][$term->tid] = $text;
      }
    }
  }
  foreach ($options as $vocab => $terms) {
    $form['visibility']['terms'][$vocab]['tids'] = array(
      '#title' => $vocabs[$vocab]->name,
      '#type' => 'select',
      '#default_value' => $default_tid_options,
      '#options' => $terms,
      '#multiple' => TRUE,
    );
  }
  $form['#submit'][] = 'block_term_form_block_admin_configure_submit';
}

/**
 * Form submit handler for block configuration form.
 *
 * @see block_term_form_block_admin_configure_alter()
 */
function block_term_form_block_admin_configure_submit($form, &$form_state) {
  db_delete('block_term')
    ->condition('module', $form_state['values']['module'])
    ->condition('delta', $form_state['values']['delta'])
    ->execute();
  $query = db_insert('block_term')->fields(array('tid', 'module', 'delta'));
  // TODO: isn't there a cleaner way than this double foreach?
  foreach ($form_state['values']['terms'] as $vocab) {
    foreach (array_filter($vocab['tids']) as $tid) {
      $query->values(array(
        'tid' => $tid,
        'module' => $form_state['values']['module'],
        'delta' => $form_state['values']['delta'],
      ));
    }
  }
  $query->execute();
}

/**
 * Implements hook_block_list_alter().
 *
 * Check the term specific visibilty settings.
 * Remove the block if the visibility conditions are not met.
 */
function block_term_block_list_alter(&$blocks) {
  global $theme_key;

  // Build an array of terms for each block.
  $block_tids = array();
  $result = db_query('SELECT module, delta, tid FROM {block_term}');
  foreach ($result as $record) {
    $tid = $record->tid;
    $block_tids[$record->module][$record->delta][$tid] = TRUE;
    //把子term也加进来. 
    // By jackeychen <jziwenchen@gmail.com>
    // $children_terms = taxonomy_get_children($tid);
    // foreach ($children_terms as $children_term) {
    //   $block_tids[$record->module][$record->delta][$children_term->tid] = TRUE;
    // }
  }

  $node = menu_get_object();
  if (!empty($node)) {
    $node_tids = array();
    // Get taxonomy_term_reference field names.
    $taxonomy_fields = db_query("SELECT field_name FROM {field_config} WHERE type = 'taxonomy_term_reference'");
    foreach ($taxonomy_fields as $field) {
      if (isset($node->{$field->field_name}[$node->language])) {
        foreach ($node->{$field->field_name}[$node->language] as $term) {
          $node_tids[$term['tid']] = TRUE;
        }        
      }
    }
  }
  
  foreach ($blocks as $key => $block) {
    if (!isset($block->theme) || !isset($block->status) || $block->theme != $theme_key || $block->status != 1) {
      // This block was added by a contrib module, leave it in the list.
      continue;
    }

    // If a block has no terms associated, it is displayed for every term.
    // For blocks with terms associated, if the term does not match
    // the settings from this block, remove it from the block list.
    if (isset($block_tids[$block->module][$block->delta])) {
      if (!empty($node)) {
        // This is a node or node edit page.
        if (!array_intersect_key($block_tids[$block->module][$block->delta], $node_tids)) {
          // This block should not be displayed for this term.
          unset($blocks[$key]);
          continue;
        }
      }
      //判断是否是term页面
      else if (arg(0) == 'taxonomy' && arg(1) == 'term') {
        $node_tids[arg(2)] = TRUE;
        // This is a node or node edit page.
        if (!array_intersect_key($block_tids[$block->module][$block->delta], $node_tids)) {
          // This block should not be displayed for this term.
          unset($blocks[$key]);
          continue;
        }
      }
      else {
        // This is not a node page, remove the block.
        unset($blocks[$key]);
        continue;
      }
    }
  }
}
